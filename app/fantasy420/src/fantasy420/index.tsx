import Fantasy420 from "./app";

// "evaluate": "raw => Promise.resolve(raw || \"{}\")\n.then(JSON.parse)\n.then(prev =>\nfetch(\"https://fantasy.espn.com/apis/v3/games/ffl/seasons/2022/segments/0/leagues/203836968?scoringPeriodId=2&view=kona_player_info\",\n    {\"headers\": {\"x-fantasy-filter\": JSON.stringify(\n        {\"players\":{\"filterSlotIds\":{\"value\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24]}}}\n    )}}\n)\n.then(resp => resp.json())\n.then(json => json.players)\n.then(players => players.map(player => player.player))\n.then(players => players.filter(({ownership}) => ownership?.averageDraftPosition < 169))\n.then(players => players.filter(({injuryStatus}) => [\"QUESTIONABLE\", \"DOUBTFUL\", \"OUT\", \"INJURY_RESERVE\", \"SUSPENDED\"].includes(injuryStatus)))\n.then(players => players.map(({fullName, ...player}) => ({fullName: fullName.replaceAll(\".\", \"\"), ...player})))\n.then(players => players.map(({fullName, injuryStatus}) => [fullName, injuryStatus]))\n.then(Object.fromEntries)\n.then(players => ({\n    players,\n    healthy: Object.keys(prev).filter(p => !p.startsWith(\"__\") && !players[p]),\n    injured: Object.keys(players).filter(p => !(prev[p]?.startsWith(players[p])))\n}))\n.then(({players, healthy, injured}) => healthy.length === 0 && injured.length === 0 ? null : \n    []\n        .concat(!raw || injured.length === 0 ? [] : [[\"__injured__\", injured.join(\",\")]])\n        .concat(healthy.length === 0 ? [] : [[\"__healthy__\", healthy.join(\",\")]])\n        .concat(injured.map(p => [p, `${players[p]} ${new Date().toLocaleString('en-US', { timeZone: 'America/New_York' })}`]))\n        .concat(Object.keys(prev).filter((p) => !p.startsWith(\"__\") && !injured.includes(p) && !healthy.includes(p)).map(p => [p, prev[p]]))\n)\n.then(arr => arr === null ? prev : Object.fromEntries(arr))\n.then(obj => JSON.stringify(obj, null, 2))\n.catch(err => \"first2know_ignore\")\n)",

function index() {
  return <Fantasy420 />;
}

export default index;
